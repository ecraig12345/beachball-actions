name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency: ${{ github.ref }}-ci

permissions: {}

jobs:
  ci:
    outputs:
      shouldCancel: ${{ steps.batchRuns.outputs.shouldCancel }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version-file: .nvmrc
          cache: yarn

      - run: yarn --immutable

      - run: yarn syncpack:check
      - run: yarn format:check

      - run: yarn build
      - run: yarn lint
      - run: yarn test
      - run: yarn package

      - name: e2e - install-beachball
        uses: ./install-beachball

      - name: e2e - check-for-modified-files
        uses: ./check-for-modified-files

      - name: e2e - batch-runs
        uses: ./batch-runs
        id: batchRuns
        with:
          mode: output
          token: ${{ github.token }}

      - name: e2e - batch-runs result
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        if: ${{ steps.batchRuns.outputs.shouldCancel != 'no' }}
        with:
          script: |
            const shouldCancel = '${{ steps.batchRuns.outputs.shouldCancel }}';
            if (shouldCancel === 'yes' && process.env.GITHUB_REF_NAME === 'main') {
              core.info('Newer run is pending for main');
            } else {
              core.setFailed(`batch-runs unexpectedly returned "${shouldCancel}"`);
            }

      # Note: this is not actually used here to determine if a release is needed
      - name: e2e - should-release
        uses: ./should-release
        id: shouldRelease
        with:
          mode: output
          token: ${{ github.token }}
          batch: true

      - name: e2e - should-release result
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8
        with:
          script: |
            const shouldRelease = '${{ steps.shouldRelease.outputs.shouldRelease }}';
            if (shouldRelease !== 'yes' && shouldRelease !== 'no') {
              core.setFailed(`should-release returned "${shouldRelease}" instead of "yes" or "no"`);
            } else {
              core.info(`should-release returned shouldRelease: "${shouldRelease}"`);
            }

  # Run the release in a separate job with access to an environment with a token.
  # This approach requires re-running the build but skips the tests.
  release:
    needs: ci
    if: ${{ github.ref == 'refs/heads/main' && needs.ci.outputs.shouldCancel == 'no' }}

    runs-on: ubuntu-latest

    environment: release

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version-file: .nvmrc
          cache: yarn

      - run: yarn --immutable

      - run: yarn build
      - run: yarn package

      # Verify that no newer runs were queued since the check in the previous job
      - uses: ./batch-runs
        id: batchRuns
        with:
          mode: output
          token: ${{ github.token }}

      - name: Set git config
        run: |
          git config user.name "Elizabeth Craig"
          git config user.email "elcraig@microsoft.com"
          git remote set-url origin "https://$REPO_PAT@github.com/$GITHUB_REPOSITORY"
        env:
          REPO_PAT: ${{ secrets.REPO_PAT }}

      - name: Release actions
        if: ${{ steps.batchRuns.outputs.shouldCancel == 'no' }}
        uses: int128/release-typescript-action@4b93cf2f4b55fbce962db4c9acb89760c4a699d9 # v1
        with:
          major-version: 2
          token: ${{ secrets.REPO_PAT }}
